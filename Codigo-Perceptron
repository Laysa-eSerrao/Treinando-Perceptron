# import -> incorpora uma biblioteca \
# (código já escrito para resolver algum problema específico)
import numpy as np

class Perceptron:
    # Declaração do construtor da classe
    def __init__(self):
        pass

    def train(self, inputs, outputs, learning_rate=0.1, epochs=100):
        self.inputs = inputs
        self.outputs = outputs
        self.learning_rate = learning_rate
        self.epochs = epochs

        # Inicialização de pesos iniciais de forma aleatória
        w1, w2, bias = np.random.uniform(-1, 1), np.random.uniform(-1, 1), np.random.uniform(-1, 1)
        # w1 = np.random.uniform(-1, 1)
        # w2 = np.random.uniform(-1, 1)
        # bias = np.random.uniform(-1, 1)

        for i in range(epochs):
            for j in range(len(inputs)):
                # função de ativação
                sigmoid = 1 / (1 + np.exp(-(w1 * inputs[j][0] + w2 * inputs[j][1] + bias)))

                # atualização dos pesos por iteração
                w1 = w1 + learning_rate * (outputs[j][0] - sigmoid) * inputs[j][0]
                w2 = w2 + learning_rate * (outputs[j][0] - sigmoid) * inputs[j][1]
                bias = bias + (learning_rate * (outputs[j] [0] - sigmoid))

        return w1, w2, bias

    def predict(self, weights, x1, x2):
        # Podemos usar FUNÇÃO DEGRAU OU FUNÇÃO SIGMOID
        # Sigmoid = deveolve um se o resultado for maior do que 0.5, senão 0
        return 1 if 1 / (1 + np.exp(- ((x1 * weights[0])
        + (x2 * weights[1]) + weights[2]))) > 0.5 else 0


if __name__ == '__main__':
    # Entradas das portas lógicas (em pares)
    inputs = [[0,0], [0,1], [1,0], [1,1]]
    outputs = [[0], [1], [1], [1]]

    print(' ')
    for i in range(len(inputs)):
        print(inputs[i][0], inputs[i][1], '->', outputs[i][0])


    print( ' ')

    for i in range(len(inputs)):
        for j in range(len(inputs[i])):
            print(inputs[i][j], end=', ')
        print(' ')


    perceptron = Perceptron()

    # Treinando o perceptron
    tanning = perceptron.train(inputs = inputs,
                               outputs = outputs,
                               learning_rate=0.1, epochs=100)

    prediction = perceptron.predict(tanning, 1, 1)

    print('OUTPUT ', prediction)
